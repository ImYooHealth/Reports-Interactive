{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/imyoo/Documents/Learning/React/hello-d3/src/views/MultilineChart/MultilineChart.js\";\n/** MultilineChart.js */\nimport React from \"react\";\nimport * as d3 from \"d3\";\nvar MultilineChart = function MultilineChart(_ref) {\n  var _ref$data = _ref.data,\n    data = _ref$data === void 0 ? [] : _ref$data,\n    _ref$dimensions = _ref.dimensions,\n    dimensions = _ref$dimensions === void 0 ? {} : _ref$dimensions;\n  var svgRef = React.useRef(null);\n  var width = dimensions.width,\n    height = dimensions.height,\n    _dimensions$margin = dimensions.margin,\n    margin = _dimensions$margin === void 0 ? {} : _dimensions$margin;\n  var svgWidth = width + margin.left + margin.right;\n  var svgHeight = height + margin.top + margin.bottom;\n  React.useEffect(function () {\n    var xScale = d3.scaleTime().domain(d3.extent(data[0].items, function (d) {\n      return d.date;\n    })).range([0, width]);\n    var yScale = d3.scaleLinear().domain([d3.min(data[0].items, function (d) {\n      return d.value;\n    }) - 50, d3.max(data[0].items, function (d) {\n      return d.value;\n    }) + 50]).range([height, 0]);\n    // Create root container where we will append all other chart elements\n    var svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements\n    var svg = svgEl.append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"));\n    // Add X grid lines with labels\n    var xAxis = d3.axisBottom(xScale).ticks(5).tickSize(-height + margin.bottom);\n    var xAxisGroup = svg.append(\"g\").attr(\"transform\", \"translate(0, \".concat(height - margin.bottom, \")\")).call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\");\n    // Add Y grid lines with labels\n    var yAxis = d3.axisLeft(yScale).ticks(5).tickSize(-width).tickFormat(function (val) {\n      return \"\".concat(val, \"%\");\n    });\n    var yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\");\n    // Draw the lines\n    var line = d3.line().x(function (d) {\n      return xScale(d.date);\n    }).y(function (d) {\n      return yScale(d.value);\n    });\n    svg.selectAll(\".line\").data(data).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n      return d.color;\n    }).attr(\"stroke-width\", 3).attr(\"d\", function (d) {\n      return line(d.items);\n    });\n  }, [data, height, margin, width]);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    width: svgWidth,\n    height: svgHeight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  });\n};\nexport default MultilineChart;","map":{"version":3,"names":["React","d3","MultilineChart","_ref","_ref$data","data","_ref$dimensions","dimensions","svgRef","useRef","width","height","_dimensions$margin","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","xScale","scaleTime","domain","extent","items","d","date","range","yScale","scaleLinear","min","value","max","svgEl","select","current","selectAll","remove","svg","append","attr","concat","xAxis","axisBottom","ticks","tickSize","xAxisGroup","call","yAxis","axisLeft","tickFormat","val","yAxisGroup","line","x","y","enter","color","createElement","ref","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/imyoo/Documents/Learning/React/hello-d3/src/views/MultilineChart/MultilineChart.js"],"sourcesContent":["/** MultilineChart.js */\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nconst MultilineChart = ({ data = [], dimensions = {} }) => {\n  const svgRef = React.useRef(null);\n  const { width, height, margin = {} } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n\n  React.useEffect(() => {\n    const xScale = d3\n      .scaleTime()\n      .domain(d3.extent(data[0].items, (d) => d.date))\n      .range([0, width]);\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data[0].items, (d) => d.value) - 50,\n        d3.max(data[0].items, (d) => d.value) + 50\n      ])\n      .range([height, 0]);\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements\n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    // Add X grid lines with labels\n    const xAxis = d3\n      .axisBottom(xScale)\n      .ticks(5)\n      .tickSize(-height + margin.bottom);\n    const xAxisGroup = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n      .call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup\n      .selectAll(\"text\")\n      .attr(\"opacity\", 0.5)\n      .attr(\"color\", \"white\")\n      .attr(\"font-size\", \"0.75rem\");\n    // Add Y grid lines with labels\n    const yAxis = d3\n      .axisLeft(yScale)\n      .ticks(5)\n      .tickSize(-width)\n      .tickFormat((val) => `${val}%`);\n    const yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup\n      .selectAll(\"text\")\n      .attr(\"opacity\", 0.5)\n      .attr(\"color\", \"white\")\n      .attr(\"font-size\", \"0.75rem\");\n    // Draw the lines\n    const line = d3\n      .line()\n      .x((d) => xScale(d.date))\n      .y((d) => yScale(d.value));\n\n    svg\n      .selectAll(\".line\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", (d) => line(d.items));\n  }, [data, height, margin, width]);\n\n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n};\n\nexport default MultilineChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}